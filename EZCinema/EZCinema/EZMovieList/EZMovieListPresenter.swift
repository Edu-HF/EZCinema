//
//  EZMovieListPresenter.swift
//  EZCinema
//
//  Created by Edu on 17/07/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation

final class EZMovieListPresenter {

    // MARK: - Private properties
    private weak var view: EZMovieListViewInterface?
    private let interactor: EZMovieListInteractorInterface
    private let wireframe: EZMovieListWireframeInterface
    private var movieSelected: Movie?

    // MARK: - Lifecycle
    init(view: EZMovieListViewInterface, interactor: EZMovieListInteractorInterface, wireframe: EZMovieListWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions
extension EZMovieListPresenter: EZMovieListPresenterInterface {
    
    //MARK: - Movie Selected
    func onMovieSelected(movieIn: Movie?) {
        self.wireframe.pushToMovieDetail(movieIn: movieIn)
    }
    
    //MARK: - Fetch Movie List
    func onGetMovieList() {
        
        self.view?.showLoading()
        self.interactor.getMovieList() { (resultIn) in
            
            DispatchQueue.main.async {
                self.view?.hideLoading()
                switch resultIn {
                case .success(let mResponse):
                    if let mList = mResponse.movieList {
                        self.view?.onSetMovieList(movieListIn: mList)
                    }else{
                        self.view?.showAlert(title: "ERROR", description: "")
                    }
                case .failure(let errorIn):
                    self.view?.showAlert(title: "ERROR", description: errorIn.localizedDescription)
                }
            }
        }
    }
    
    func onGetUpcomingList() {
        
        self.view?.showLoading()
        self.interactor.getUpcomingList() { (resultIn) in
            
            DispatchQueue.main.async {
                self.view?.hideLoading()
                switch resultIn {
                case .success(let mResponse):
                    if let mUPList = mResponse.movieList {
                        self.view?.onSetUpcomingList(movieListIn: mUPList)
                    }else{
                        self.view?.showAlert(title: "ERROR", description: "")
                    }
                case .failure(let errorIn):
                    self.view?.showAlert(title: "ERROR", description: errorIn.localizedDescription)
                }
            }
        }
    }
}
